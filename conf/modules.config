/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'UNTAR_HMM' {
        publishDir = [
            path: { "${params.outdir}/untar/hmm" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'UNTAR_MSA' {
        publishDir = [
            path: { "${params.outdir}/untar/msa" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CAT_HMM' {
        publishDir = [
            path: { "${params.outdir}/update_families/hmmer/concatenated" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CAT_FASTA' {
        ext.prefix = { "${meta.id}_${meta.family}" }
        tag = { "${meta.id}_${meta.family}" }
        publishDir = [
            path: { "${params.outdir}/update_families/fasta" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:CAT_CAT' {
        publishDir = [
            path: { "${params.outdir}/remove_redundancy/hmmer/concatenated" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SEQKIT_SEQ' {
        ext.args = "--remove-gaps"
        ext.prefix = { "${meta.id}_${meta.family}" }
        tag = { "${meta.id}_${meta.family}" }
        publishDir = [
            path: { "${params.outdir}/seqkit/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_CREATEDB' {
        publishDir = [
            path: { "${params.outdir}/mmseqs/initial_clustering/mmseqs_createdb/" },
            mode: params.publish_dir_mode,
            enabled: params.save_mmseqs_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:EXECUTE_CLUSTERING:MMSEQS_CREATEDB' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/mmseqs/update_families/mmseqs_createdb/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:EXECUTE_CLUSTERING:MMSEQS_CREATEDB' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/mmseqs/redundancy_clustering/mmseqs_createdb/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_CLUSTER' {
        ext.args = [
            "--min-seq-id ${params.cluster_seq_identity}",
            "-c ${params.cluster_coverage}",
            "--cov-mode ${params.cluster_cov_mode}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mmseqs/initial_clustering/mmseqs_cluster/" },
            mode: params.publish_dir_mode,
            enabled: params.save_mmseqs_clustering,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES_CLUSTERING:EXECUTE_CLUSTERING:MMSEQS_CLUSTER' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        ext.args = [
            "--min-seq-id ${params.cluster_seq_identity_for_redundancy}",
            "-c ${params.cluster_coverage_for_redundancy}",
            "--cov-mode ${params.cluster_cov_mode_for_redundancy}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mmseqs/update_families/mmseqs_cluster/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:EXECUTE_CLUSTERING:MMSEQS_CLUSTER' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        ext.args = [
            "--min-seq-id ${params.cluster_seq_identity_for_redundancy}",
            "-c ${params.cluster_coverage_for_redundancy}",
            "--cov-mode ${params.cluster_cov_mode_for_redundancy}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mmseqs/redundancy_clustering/mmseqs_cluster/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_LINCLUST' {
        ext.args = [
            "--min-seq-id ${params.cluster_seq_identity}",
            "-c ${params.cluster_coverage}",
            "--cov-mode ${params.cluster_cov_mode}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mmseqs/initial_clustering/mmseqs_linclust/" },
            mode: params.publish_dir_mode,
            enabled: params.save_mmseqs_clustering,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:EXECUTE_CLUSTERING:MMSEQS_LINCLUST' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        ext.args = [
            "--min-seq-id ${params.cluster_seq_identity_for_redundancy}",
            "-c ${params.cluster_coverage_for_redundancy}",
            "--cov-mode ${params.cluster_cov_mode_for_redundancy}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mmseqs/update_families/mmseqs_linclust/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:EXECUTE_CLUSTERING:MMSEQS_LINCLUST' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        ext.args = [
            "--min-seq-id ${params.cluster_seq_identity_for_redundancy}",
            "-c ${params.cluster_coverage_for_redundancy}",
            "--cov-mode ${params.cluster_cov_mode_for_redundancy}",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mmseqs/redundancy_clustering/mmseqs_linclust/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_CREATETSV' {
        publishDir = [
            path: { "${params.outdir}/mmseqs/initial_clustering/mmseqs_createtsv/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:EXECUTE_CLUSTERING:MMSEQS_CREATETSV' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/mmseqs/update_families/mmseqs_createtsv/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:EXECUTE_CLUSTERING:MMSEQS_CREATETSV' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/mmseqs/redundancy_clustering/mmseqs_createtsv/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CALCULATE_CLUSTER_DISTRIBUTION'{
        publishDir = [
            path: { "${params.outdir}/mmseqs/initial_clustering/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHUNK_CLUSTERS' {
        publishDir = [
            path: { "${params.outdir}/mmseqs/initial_clustering/filtered_fasta_chunks/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FAMSA_ALIGN' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/seed_msa/famsa_align/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:ALIGN_SEQUENCES:FAMSA_ALIGN' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/update_families/full_msa/famsa_align/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:ALIGN_SEQUENCES:FAMSA_ALIGN' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/full_msa/non_redundant/famsa_align/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MAFFT_ALIGN' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/seed_msa/mafft_align/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:ALIGN_SEQUENCES:MAFFT_ALIGN' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/update_families/full_msa/mafft_align/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:ALIGN_SEQUENCES:MAFFT_ALIGN' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/full_msa/non_redundant/mafft_align/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CLIPKIT' {
        ext.args = [
            "-m gappy --gaps ${params.gap_threshold}",
            params.trim_ends_only ? "--ends_only" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/seed_msa/clipkit/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:CLIPKIT' {
        ext.args = [
            "-m gappy --gaps ${params.gap_threshold}",
            params.trim_ends_only ? "--ends_only" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/update_families/full_msa/clipkit/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'HMMER_HMMBUILD' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/hmmer/hmmbuild/pre_non_redundant/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{hmm.gz}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:HMMER_HMMBUILD' {
        ext.prefix = { "${meta.family}" }
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/update_families/hmmer/hmmbuild/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{hmm.gz}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'HMMER_HMMSEARCH' {
        ext.args   = { "-E ${params.hmmsearch_evalue_cutoff}" }
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/hmmer/hmmsearch/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.domtbl.gz",
            enabled: params.save_hmmsearch_results,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:HMMER_HMMSEARCH' {
        ext.args   = { "-E ${params.hmmsearch_evalue_cutoff}" }
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/update_families/hmmer/hmmsearch/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{domtbl.gz}",
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:HMMER_HMMSEARCH' {
        ext.args   = { "-E ${params.hmmsearch_evalue_cutoff}" }
        ext.prefix = { "${meta.id}" }
        tag = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/remove_redundancy/hmmer/hmmsearch/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{domtbl.gz}",
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FILTER_RECRUITED' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/full_msa/pre_non_redundant/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'HMMER_HMMALIGN' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/full_msa/pre_non_redundant/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.sto.gz",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_REDUNDANT_FAMS' {
        publishDir = [
            path: { "${params.outdir}/remove_redundancy/non_redundant_fams/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FILTER_NON_REDUNDANT_HMMS' {
        publishDir = [
            path: { "${params.outdir}/hmmer/hmmbuild/non_redundant/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REMOVE_REDUNDANT_SEQS' {
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/remove_redundancy/reps_fasta/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:REMOVE_REDUNDANT_SEQS' {
        tag = { "${meta.family}_${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/update_families/reps_fasta/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXTRACT_FAMILY_REPS' {
        publishDir = [
            path: { "${params.outdir}/family_reps/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:UPDATE_FAMILIES:EXTRACT_FAMILY_REPS' {
        publishDir = [
            path: { "${params.outdir}/update_families/family_reps/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:REMOVE_REDUNDANCY:EXTRACT_FAMILY_REPS' {
        publishDir = [
            path: { "${params.outdir}/remove_redundancy/family_reps/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BRANCH_HITS_FASTA' {
        publishDir = [
            path: { "${params.outdir}/update_families/branch_fasta/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
